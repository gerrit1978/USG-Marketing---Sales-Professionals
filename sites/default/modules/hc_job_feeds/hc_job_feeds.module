<?php

/**
 * Implements hook_cron
 */
function hc_job_feeds_cron() {

  // first, we load the XML-feeds, once for NL, once for FR
  $feeds = array(
    'nl' => array(
      'url' => variable_get('hc_feed_nl', ''),
      'user' => variable_get('hc_user_nl', ''),
      'password' => variable_get('hc_pass_nl', ''),
    ),
    'fr' => array(
      'url' => variable_get('hc_feed_fr', ''),
      'user' => variable_get('hc_user_fr', ''),
      'password' => variable_get('hc_pass_fr', ''),
    ),
  );
  
  $jobs = array();
  $jobs_from_feed = array();
  
  foreach ($feeds as $language => $feed) {
    $url = $feed['url'];
    $user = $feed['user'];
    $password = $feed['password'];
    $context = stream_context_create(
      array(
        'http' => array(
          'header'  => "Authorization: Basic " . base64_encode($user.":".$password)
        )
      )
    ); 
    
    $file = file_get_contents($url, false, $context) or die('Kan niet laden');    
    $xml = simplexml_load_string($file);    
    
    foreach ($xml->job as $item) {
      $fid = (string)$item->referencenumber;
      $title = (string)$item->title;
      $url = (string)$item->url;
      $city = (string)$item->city;
/*       $body = (string)$item->description; */
      $description = (string)$item->descriptionNoHTML->divided->description;
      $requirements = (string)$item->descriptionNoHTML->divided->requirements;
      $benefits = (string)$item->descriptionNoHTML->divided->benefits;
      $salary = (string)$item->salary;
      $education = (string)$item->education;
      $jobtype = (string)$item->jobtype;
      $category = (string)$item->category;
      $category_group = (string)$item->categoryGroup;
      $weekly_hours = (string)$item->weeklyHours;
      $industry = (string)$item->industry;
      
      $jobs[$fid] = array(
        'fid' => $fid,
        'title' => $title,
        'url' => $url,
        'city' => $city,
        'body' => $description,
        'requirements' => $requirements,
        'benefits' => $benefits,
        'salary' => $salary,
        'education' => $education,
        'jobtype' => $jobtype,
        'category' => $category,
        'category_group' => $category_group,
        'weekly_hours' => $weekly_hours,
        'industry' => $industry,
        'language' => $language,
      );
      
      $jobs_from_feed[$fid] = $fid;
    }

  }


  /** ADDING JOBS **/
  $jobs_fids = array();
  
  foreach ($jobs as $fid => $job) {
    $jobs_fids[$fid] = $fid;
  }

  // get data from db
  $jobs_from_db = array();
  $result = db_query("SELECT * FROM {hc_job_feeds_nodes};");
  foreach ($result as $row) {
    $fid = $row->fid;
    $jobs_from_db[$fid] = $fid;
    if (isset($jobs_fids[$fid])) {
      unset($jobs_fids[$fid]);
      unset($jobs[$fid]);
    }
  }
  
  $i = 0;
  foreach ($jobs as $job) {
    $i++;
    $e = entity_create("node", array('type' => "job"));
    $ew = entity_metadata_wrapper("node", $e);
/*
    print_r($ew->getPropertyInfo());
    exit();
*/

    $ew->title->set($job['title']);
    $ew->field_beknopte_omschrijving->set(array(
      'value' => check_markup($job['body'], "full_html"),
      'format' => 'full_html',
    ));
    $ew->field_functie_eisen->set(array(
      'value' => check_markup($job['requirements'], "full_html"),
      'format' => 'full_html',
    ));
    $ew->field_wat_wij_bieden->set(array(
      'value' => check_markup($job['benefits'], "full_html"),
      'format' => 'full_html',
    ));
    $ew->field_job_regio->set($job['city']);
    
    $ew->language->set($job['language']);
    $ew->save();
    $nid = $ew->nid->value();
    
    // insert newly created job in db
    $result = db_insert('hc_job_feeds_nodes')
      ->fields(array(
        'fid' => $job['fid'],
        'nid' => $nid,
      ))
      ->execute();
  }
  
  drupal_set_message($i . ' job(s) toegevoegd.');  
  
  
  /** REMOVING JOBS **/
  $jobs_to_be_removed = array_diff($jobs_from_db, $jobs_from_feed);
  
  $i = 0;  
  foreach ($jobs_to_be_removed as $fid) {
    $result = db_query("SELECT nid FROM {hc_job_feeds_nodes} WHERE fid=:fid;", array(':fid' => $fid));
    foreach ($result as $row) {
      // we delete this node. Since we implemented hook_node_delete, the db entry in hc_job_feeds_nodes will also be removed
      $nid = $row->nid;
      $ew = entity_metadata_wrapper("node", $nid);
      $ew->delete();
			$i++;      
    }
  }
  
  drupal_set_message($i . ' job(s) verwijderd.');
  
}



/**
 * Implements hook_menu
 */
function hc_job_feeds_menu() {
  $items = array();
  
  $items['admin/config/services/job_feeds'] = array(
    'page callback' => array('drupal_get_form'),
    'page arguments' => array('hc_jobs_feeds_admin_form'),
    'access arguments' => array('administer hc job feeds'),
    'title' => t('Administer job feeds'),
    'file' => 'hc_job_feeds.admin.inc',
  );
  
  return $items;
}


/**
 * Implements hook_permission
 */
function hc_job_feeds_permission() {
  return array(
    'administer hc job feeds' => array(
      'title' => t('Administer job feeds'),
      'description' => t('Perform administration of job feeds'),
    ),
  );
}


/**
 * Implements hook_node_delete
 */
function hc_job_feeds_node_delete($node) {
  db_delete('hc_job_feeds_nodes')
    ->condition('nid', $node->nid)
    ->execute();
}